# This workflow will install Python dependencies, run tests, and report the coverage with a variety of Python versions and OSs.
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # * is a special character in YAML, so you have to quote this string
    - cron:  '0 0 * * *' # every midnight

jobs:
  test:
    name: Test (${{ matrix.os }}, python version ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10"] # list of Python versions to test
        exclude:
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
        include:
          - os: ubuntu-latest
            path: ~/.cache/pip
          - os: windows-latest
            path: ~\AppData\Local\pip\Cache

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python using Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      # Cache downloaded pip dependencies
      - name: Cache pip dependencies
        id: cache-pip
        uses: actions/cache@v2
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-python${{ matrix.python-version }}-pip-${{ hashFiles('**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-python${{ matrix.python-version }}-pip-

      # Cache pytest-testmon cache
      - name: Cache .testmondata
        id: cache-testmon
        uses: actions/cache@v2
        with:
          path: .testmondata_bp
#          key: ${{ runner.os }}-python${{ matrix.python-version }}-testmon-cache
          key: ${{ runner.os }}-python${{ matrix.python-version }}-testmon-${{ hashFiles('**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-python${{ matrix.python-version }}-testmon-

      - name: Install dependencies
        run: |
          pip install rdkit
          pip install pyparsing==3.0.9
          pip install torch==2.0.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
          pip install torchvision==0.15.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
          pip install torch_scatter==2.1.1 -f https://data.pyg.org/whl/torch-2.0.0+cpu.html
          pip install torch_sparse==0.6.17 -f https://data.pyg.org/whl/torch-2.0.0+cpu.html
          pip install torch_cluster==1.6.1 -f https://data.pyg.org/whl/torch-2.0.0+cpu.html
          pip install torch_spline_conv==1.2.2 -f https://data.pyg.org/whl/torch-1.13.0+cpu.html
          pip install torch_geometric==2.3.0
          pip install -e .[dev]
        shell: bash -l {0}

      # Generate pytest-testmon cache if the event is push
      - name: Run tests (push)
        id: run_tests_push
        if: github.event_name == 'push'
        run: |
          pytest --testmon --nbmake --nbmake-timeout=3000 --cov=kale
        shell: bash -l {0}

      # Run the whole test if the event is schedule
      - name: Run tests (schedule-all)
        id: run_tests_schedule_all
        if: github.event_name == 'schedule'
        run: |
          pytest --nbmake --nbmake-timeout=3000 --cov=kale
        shell: bash -l {0}

      # Generate pytest-testmon cache if the event is schedule
      - name: Run tests (schedule-testmon)
        id: run_tests_schedule_testmon
        if: github.event_name == 'schedule'
        run: |
          pytest --testmon --nbmake --nbmake-timeout=3000 --cov=kale
        shell: bash -l {0}

      # Restore pytest-testmon cache without generating new cache if the event is pull request
      - name: Run tests (pull request)
        id: run_tests_pull_request
        if: github.event_name == 'pull_request'
        run: |
          pytest --testmon --nbmake --nbmake-timeout=3000 --cov=kale
#          pytest --testmon-nocollect --nbmake --nbmake-timeout=3000 --cov=kale
        shell: bash -l {0}

      - name: Determine coverage
        run: |
          coverage xml
        shell: bash -l {0}

      - name: Report coverage
        uses: codecov/codecov-action@v1
